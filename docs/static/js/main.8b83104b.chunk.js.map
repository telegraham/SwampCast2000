{"version":3,"sources":["adapter.js","components/Locations.js","components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["API_ROOT","process","Locations","props","linx","locations","map","location","react_default","a","createElement","key","id","NavLink","to","name","toLowerCase","className","state","readings","handleReceivedReading","reading","_this","setState","Object","toConsumableArray","concat","this","setReadings","locationId","callback","_this2","data","fetch","then","res","json","console","log","filter","Date","parse","time","reduce","accumulator","forEach","datum","push","y","temperature","x","seconds","huh","toLocaleString","length","lib","channel","onReceived","es","height","width","processedData","Component","renderLocation","renderProps","stub","match","params","find","Graph_default","Fragment","Route","path","render","Boolean","window","hostname","ReactDOM","url","HashRouter","src_App_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b83104b.chunk.js","sourcesContent":["\nconst API_ROOT = process.env.REACT_APP_API_URL\nexport const API_WS_ROOT = process.env.REACT_APP_SOCKET_URL;\n\n// const HEADERS = {\n//   'Content-Type': 'application/json',\n//   Accept: 'application/json',\n// };\n\nexport function getLocations(callback) {\n  fetch(`${ API_ROOT }/locations`)\n    .then(res => res.json())\n    .then(callback);\n}\n\nexport function getReadings(locationId, callback) {\n  fetch(`${ API_ROOT }/locations/${ locationId }/readings`)\n    .then(res => res.json())\n    .then(callback);\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function(props) {\n    const linx = props.locations.map(location => { return (<li key={ location.id }>\n        <NavLink to={ \"/\" + location.name.toLowerCase() }>{ location.name }</NavLink>\n      </li>)\n    });\n\n    return (<ol className=\"locations\">\n      { linx }\n    </ol>)\n}\n","import React, { Component } from 'react';\nimport { getReadings } from '../adapter'\nimport { ActionCable } from 'react-actioncable-provider';\nimport '../../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries} from 'react-vis';\n\nexport default class extends Component {\n\n  state = {\n    readings: []\n  }\n\n  componentDidMount(){\n    this.setReadings()\n  }\n\n  componentDidUpdate(){\n    if (this.props.location.id !== this.state.locationId)\n      this.setReadings()\n  }\n\n  setReadings(){\n    const { id } = this.props.location;\n    // console.log(this.state)\n    getReadings(id, (data) => {\n      // console.log(data)\n      this.setState({\n        locationId: id,\n        readings: data\n      })\n    })\n  }\n\n  processedData(){\n    console.log(\"pd\")\n    // console.log(this.state.readings.map(reading => Date.parse(reading.time)))\n    return this.state.readings\n      .filter(reading => Date.parse(reading.time) > 1542253140000)\n      .reduce((accumulator, reading) => {\n        reading.data.forEach(datum => {\n          accumulator.push({\n            // ...datum,\n            // dt: Date.parse(reading.time) + datum.seconds\n            y: datum.temperature,\n            x: Date.parse(reading.time) + datum.seconds\n          })\n        })\n        return accumulator;\n      }, [])\n  }\n\n  formatXAxis(huh) {\n    return new Date(huh).toLocaleString()\n  }\n\n  handleReceivedReading = (reading) => {\n    this.setState({\n      readings: [ ...this.state.readings, reading ]\n    })\n  }\n\n  render(){\n    console.log(this.state.readings.length)\n    const { location } = this.props\n    return <section>\n      <h2>\n        { this.props.location.name }\n      </h2>\n      <ActionCable\n        key={ location.id }  \n        channel={{ channel: 'ReadingsChannel', location: location.id }}\n        onReceived={this.handleReceivedReading}\n      />\n      <XYPlot height={300} width={300}>\n        <LineSeries data={ this.processedData() } />\n      </XYPlot>\n    </section>\n  }\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\n\nimport { getLocations } from './adapter'\n\nimport Locations from './components/Locations'\nimport Graph from './components/Graph'\n\n\nexport default class extends Component {\n\n  state = {\n    locations: []\n  }\n\n  componentDidMount(){\n    getLocations(data => {\n      this.setState({ locations: data });\n    });\n  }\n\n  renderLocation = (renderProps) => {\n    const stub = renderProps.match.params.location.toLowerCase();\n    const location = this.state.locations.find(location => location.name.toLowerCase() === stub)\n    if (location)\n      return <Graph location={ location } />\n    else\n      return <React.Fragment />\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <h1>Temperature TCF</h1>\n        <Locations locations={ this.state.locations } />\n        <Route path=\"/:location\" render={ this.renderLocation } />\n      </React.Fragment>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ActionCableProvider } from 'react-actioncable-provider';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { API_WS_ROOT } from './adapter'\n\nReactDOM.render(<ActionCableProvider url={API_WS_ROOT}>\n      <Router>\n        <App />\n      </Router>\n    </ActionCableProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}