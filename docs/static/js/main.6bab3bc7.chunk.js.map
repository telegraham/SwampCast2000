{"version":3,"sources":["adapter.js","components/Graph.js","components/Location.js","components/Nav.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["API_ROOT","process","xTick","tick","Date","timeAgo","ago","Graph","props","react_default","a","createElement","victory_chart","height","domain","x","range","domainPadding","y","victory_axis","label","scale","tickCount","tickFormat","xTickFn","tickValues","arr","now","getTime","map","minutesAgo","style","axisLabel","fontFamily","tickLabels","dependentAxis","victory_line","interpolation","data","stroke","victory_scatter","size","fill","DAYS","state","last_5_minutes","last_hour","today","last_week","last_month","last_year","handleReceivedReading","reading","historicalReading","historical_reading","_this","setState","Object","toConsumableArray","slice","concat","isUpdate","this","setReadings","location","slug","locationSlug","callback","_this2","objectSpread","fetch","then","res","json","whichKey","sourceReadingKeyPrefix","arguments","length","undefined","sourceTimeKeyPrefix","humidity","temperature","c","time","value","d","hours","getHours","minutes","getMinutes","getDay","className","name","lib","key","channel","onReceived","timeOfDay","dayOfWeek","Component","Nav","linx","locations","NavLink","to","Home","Fragment","renderLocation","renderProps","match","params","find","Location_default","Route","exact","path","component","render","Boolean","window","hostname","ReactDOM","url","HashRouter","App_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bab3bc7.chunk.js","sourcesContent":["\nconst API_ROOT = process.env.REACT_APP_API_URL\nexport const API_WS_ROOT = process.env.REACT_APP_SOCKET_URL;\n\n// const HEADERS = {\n//   'Content-Type': 'application/json',\n//   Accept: 'application/json',\n// };\n\nexport function getLocations(callback) {\n  fetch(`${ API_ROOT }/locations`)\n    .then(res => res.json())\n    .then(callback);\n}\n\nexport function getReadings(locationSlug, callback) {\n  fetch(`${ API_ROOT }/locations/${ locationSlug }/readings`)\n    .then(res => res.json())\n    .then(callback);\n}\n","import React from 'react'\nimport { VictoryChart, VictoryLine, VictoryScatter, VictoryAxis } from 'victory'\nimport timeAgo from 'time-ago'\n\nconst xTick = (tick) => { \n  const difference = new Date() - tick;\n  return difference < 5 * 1000 ? \"now\" :timeAgo.ago(tick, false) + \" ago\" \n}\n\nconst tickValues = (arr) => {\n  const now = new Date().getTime()\n  return arr.map((minutesAgo) => {\n    return now - minutesAgo * 60 * 1000;\n  })\n}\n\nexport default props => (<VictoryChart height={390} domain={ { x: props.range } } domainPadding={ { y: 20 } } >\n            <VictoryAxis \n              label=\"Time\"\n              scale=\"time\"\n              tickCount={ props.tickCount }\n              tickFormat={ props.xTickFn || xTick }\n              tickValues={ props.tickValues ? tickValues(props.tickValues) : props.tickValues }\n              style={{ axisLabel: { fontFamily: \"Times New Roman\" }, tickLabels: { fontFamily: \"Times New Roman\" } }} />\n            <VictoryAxis dependentAxis style={{ tickLabels: { fontFamily: \"Times New Roman\"} }} />\n            <VictoryLine\n              x=\"time\"\n              y=\"temperature\"\n              interpolation=\"linear\" data={ props.data }\n              style={{ data: { stroke: \"#fc0\" } }}\n            />\n            <VictoryScatter data={ props.data }\n              x=\"time\"\n              y=\"temperature\"\n              size={2}\n              style={{ data: { fill: \"#f00\" } }}\n            />\n            <VictoryLine\n              x=\"time\"\n              y=\"humidity\"\n              interpolation=\"linear\" data={ props.data }\n              style={{ data: { stroke: \"#0ff\" } }}\n            />\n            <VictoryScatter data={ props.data }\n              x=\"time\"\n              y=\"humidity\"\n              size={2}\n              style={{ data: { fill: \"#0e5\" } }}\n            />\n          </VictoryChart>)","import React, { Component } from 'react';\nimport { getReadings } from '../adapter'\nimport { ActionCable } from 'react-actioncable-provider';\nimport Graph from './Graph'\n\nconst DAYS = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\nconst celsiusToFahrenheit = c => c * 9 / 5 + 32\n\nexport default class extends Component {\n\n  state = {\n    last_5_minutes: [],\n    last_hour: [],\n    today: [],\n    last_week: [],\n    last_month: [],\n    last_year: [],\n  }\n\n  componentDidMount(){\n    this.setReadings()\n  }\n\n  componentDidUpdate(){\n    if (this.props.location.slug !== this.state.locationSlug)\n      this.setReadings()\n  }\n\n  setReadings(){\n    const { slug } = this.props.location;\n    // console.log(this.state)\n    getReadings(slug, (data) => {\n      // console.log(data)\n      this.setState({\n        ...data,\n        locationSlug: slug,\n        isUpdate: false\n      })\n    })\n  }\n\n  data(whichKey, sourceReadingKeyPrefix = \"\", sourceTimeKeyPrefix = \"\"){\n    return this.state[whichKey].map(reading => ({\n      humidity: reading[sourceReadingKeyPrefix + \"humidity\"],\n      temperature: celsiusToFahrenheit(reading[sourceReadingKeyPrefix + \"temperature\"]),\n      time: new Date(reading[sourceTimeKeyPrefix + \"time\"]).getTime()\n    }))\n  }\n\n  handleReceivedReading = (reading) => {\n    const historicalReading = reading.historical_reading;\n    this.setState({\n      last_5_minutes: [ ...this.state.last_5_minutes.slice(1), historicalReading ],\n      isUpdate: true\n    })\n  }\n\n  timeOfDay(value){\n    const d = new Date(value);\n    const hours = d.getHours()\n    const minutes = d.getMinutes()\n    return `${ hours }:${ minutes > 9 ? minutes : \"0\" + minutes  }`;\n  }\n\n  dayOfWeek(value){\n    return DAYS[new Date(value).getDay()];\n  }\n\n  render(){\n    const { location } = this.props\n    return <section>\n      <hr className=\"graph-divider-top\" />\n      <h2>\n        { this.props.location.name }\n      </h2>\n      <ActionCable\n        key={ location.slug }  \n        channel={{ channel: 'ReadingsChannel', location: location.slug }}\n        onReceived={this.handleReceivedReading}\n      />\n      <ol className=\"charts\">\n        <li>\n          <Graph data={ this.data(\"last_5_minutes\") } isUpdate={ this.state.isUpdate } tickValues={ [5, 4, 3, 2, 1, 0] }/>\n        </li>\n        <li>\n          <Graph data={ this.data(\"last_hour\") } tickValues={ [ 50,  30, 10] } />\n        </li>\n        <li> \n          <Graph data={ this.data(\"today\", \"mean_\", \"start_\") } xTickFn={ this.timeOfDay } />\n        </li>\n        <li>\n          <Graph data={ this.data(\"last_week\", \"mean_\", \"start_\") } xTickFn={ this.dayOfWeek } range={ [ (new Date().getTime() - (7 * 24 * 60 * 60 * 1000)), new Date().getTime() ] } tickCount={ 4 } />\n        </li>\n      </ol>\n    </section>\n  }\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function(props) {\n    const linx = props.locations.map(location => { return (<li key={ location.slug }>\n        <NavLink to={ \"/\" + location.slug }>{ location.name }</NavLink>\n      </li>)\n    });\n\n    return (<ol className=\"locations\">\n      { linx }\n    </ol>)\n}\n","import React from 'react';\n\nexport default () => (<React.Fragment>\n  <marquee>Welcome to SwampCast 2000!!!</marquee>\n  <p>Select a location from the menu ^^</p>\n</React.Fragment>)\n","import React, { Component } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\n\n\nimport { getLocations } from './adapter'\n\nimport Location from './components/Location'\nimport Nav from './components/Nav'\nimport Home from './components/Home'\n\n\nexport default class extends Component {\n\n  state = {\n    locations: []\n  }\n\n  componentDidMount(){\n    getLocations(data => {\n      this.setState({ locations: data });\n    });\n  }\n\n  renderLocation = (renderProps) => {\n    const slug = renderProps.match.params.locationSlug;\n    const location = this.state.locations.find(location => location.slug === slug)\n    if (location)\n      return <Location location={ location } />\n    else\n      return <React.Fragment />\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <Nav locations={ this.state.locations } />\n        <h1 className=\"header-main\">\n          <NavLink to=\"/\">SwampCast 2000</NavLink>\n        </h1>\n        <Route exact path=\"/\" component={ Home } /> \n        <Route path=\"/:locationSlug\" render={ this.renderLocation } />\n      </React.Fragment>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ActionCableProvider } from 'react-actioncable-provider';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { API_WS_ROOT } from './adapter'\n\nReactDOM.render(<ActionCableProvider url={API_WS_ROOT}>\n      <Router>\n        <App />\n      </Router>\n    </ActionCableProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}